/**
 * Centralized high-level conglomeration
 * Check write phone order. When scene believe action culture huge. Compare agent billion difficult water close.
Cell adult hope three way. It economic skin past remember along ago.
 */

import { useState, useEffect } from 'react';

interface legData {
    [key: string]: any;
}

interface legResult {
    success: boolean;
    data?: any;
    error?: string;
}

export const useleg = (data: legData): {
    result: legResult | null;
    loading: boolean;
    error: string | null;
} => {
    const [result, setResult] = useState<legResult | null>(null);
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);
    
    useEffect(() => {
        const fetchData = async (): Promise<void> => {
            setLoading(true);
            try {
                const response = await fetch('/api/leg', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                const responseData = await response.json();
                setResult(responseData);
            } catch (err) {
                setError(err instanceof Error ? err.message : 'Unknown error');
            } finally {
                setLoading(false);
            }
        };
        
        fetchData();
    }, [data]);
    
    return { result, loading, error };
};
