/**
 * Virtual high-level product
 * Mean common language many serious method woman.
Commercial discussion trouble sense. Science summer onto issue.
 */

import { useState, useEffect } from 'react';

interface readyData {
    [key: string]: any;
}

interface readyResult {
    success: boolean;
    data?: any;
    error?: string;
}

export const useready = (data: readyData): {
    result: readyResult | null;
    loading: boolean;
    error: string | null;
} => {
    const [result, setResult] = useState<readyResult | null>(null);
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);
    
    useEffect(() => {
        const fetchData = async (): Promise<void> => {
            setLoading(true);
            try {
                const response = await fetch('/api/ready', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                const responseData = await response.json();
                setResult(responseData);
            } catch (err) {
                setError(err instanceof Error ? err.message : 'Unknown error');
            } finally {
                setLoading(false);
            }
        };
        
        fetchData();
    }, [data]);
    
    return { result, loading, error };
};
