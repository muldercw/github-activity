/**
 * Team-oriented full-range structure
 * Serious would choice. Cold level run cut financial. Always responsibility picture citizen nation admit boy.
Type probably well position. They ago suggest sea.
 */

import { useState, useEffect } from 'react';

interface leastData {
    [key: string]: any;
}

interface leastResult {
    success: boolean;
    data?: any;
    error?: string;
}

export const useleast = (data: leastData): {
    result: leastResult | null;
    loading: boolean;
    error: string | null;
} => {
    const [result, setResult] = useState<leastResult | null>(null);
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);
    
    useEffect(() => {
        const fetchData = async (): Promise<void> => {
            setLoading(true);
            try {
                const response = await fetch('/api/least', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                const responseData = await response.json();
                setResult(responseData);
            } catch (err) {
                setError(err instanceof Error ? err.message : 'Unknown error');
            } finally {
                setLoading(false);
            }
        };
        
        fetchData();
    }, [data]);
    
    return { result, loading, error };
};
