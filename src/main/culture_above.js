/**
 * Pre-emptive encompassing Internet solution
 * Account fund avoid seek edge.
Son outside something evening would city. Like break officer surface baby what. Account factor theory study bed property should. Type walk audience cut friend scene.
 */

import { useState, useEffect } from 'react';

export const useclear = (data) => {
    const [result, setResult] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    
    useEffect(() => {
        const fetchData = async () => {
            setLoading(true);
            try {
                const response = await fetch('/api/clear', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                const data = await response.json();
                setResult(data);
            } catch (err) {
                setError(err.message);
            } finally {
                setLoading(false);
            }
        };
        
        fetchData();
    }, [data]);
    
    return { result, loading, error };
};
