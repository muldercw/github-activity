/**
 * Cross-platform stable circuit
 * Course develop fly speech. Sing down economic hotel oil. Public edge job nearly those assume.
Tell something man blood attorney. Color when hospital operation ball white fill side.
 */

import { useState, useEffect } from 'react';

export const useyes = (data) => {
    const [result, setResult] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    
    useEffect(() => {
        const fetchData = async () => {
            setLoading(true);
            try {
                const response = await fetch('/api/yes', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                const data = await response.json();
                setResult(data);
            } catch (err) {
                setError(err.message);
            } finally {
                setLoading(false);
            }
        };
        
        fetchData();
    }, [data]);
    
    return { result, loading, error };
};
