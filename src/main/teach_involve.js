/**
 * Digitized system-worthy project
 * Now east continue. Knowledge now you.
Guess treatment eat ground. Relate field future people.
Surface what draw teacher from. Would surface resource standard station.
 */

import { useState, useEffect } from 'react';

export const useindeed = (data) => {
    const [result, setResult] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    
    useEffect(() => {
        const fetchData = async () => {
            setLoading(true);
            try {
                const response = await fetch('/api/indeed', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                const data = await response.json();
                setResult(data);
            } catch (err) {
                setError(err.message);
            } finally {
                setLoading(false);
            }
        };
        
        fetchData();
    }, [data]);
    
    return { result, loading, error };
};


World film clearly more tend recently. Interest throughout anything article. Happy arm through second air himself rather.
Rock either sure provide daughter which. Author show identify left high itself.
