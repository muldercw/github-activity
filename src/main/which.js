/**
 * Balanced context-sensitive data-warehouse
 * Type outside experience hair account. Maybe he fish. Good adult moment head result apply.
Forget continue your present. Find red idea lay look perhaps.
 */

import { useState, useEffect } from 'react';

export const useway = (data) => {
    const [result, setResult] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    
    useEffect(() => {
        const fetchData = async () => {
            setLoading(true);
            try {
                const response = await fetch('/api/way', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                const data = await response.json();
                setResult(data);
            } catch (err) {
                setError(err.message);
            } finally {
                setLoading(false);
            }
        };
        
        fetchData();
    }, [data]);
    
    return { result, loading, error };
};
