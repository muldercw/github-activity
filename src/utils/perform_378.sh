#!/bin/bash
# Right-sized object-oriented process improvement
# Subject statement case its. Ball statement street question list lose conference me.

set -euo pipefail

# Configuration
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
BUILD_DIR="$PROJECT_ROOT/build"
DIST_DIR="$PROJECT_ROOT/dist"
NODE_MODULES="$PROJECT_ROOT/node_modules"

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Functions
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Clean build directories
clean() {
    log "Cleaning build directories..."
    rm -rf "$BUILD_DIR" "$DIST_DIR"
    mkdir -p "$BUILD_DIR" "$DIST_DIR"
}

# Install dependencies
install() {
    log "Installing dependencies..."
    if [[ -f "package.json" ]]; then
        npm install
    elif [[ -f "requirements.txt" ]]; then
        pip install -r requirements.txt
    else
        warn "No package.json or requirements.txt found"
    fi
}

# Build project
build() {
    log "Building project..."
    if [[ -f "package.json" ]]; then
        npm run build
    elif [[ -f "setup.py" ]]; then
        python setup.py build
    else
        warn "No build configuration found"
    fi
}

# Main execution
main() {
    log "Starting build process..."
    clean
    install
    build
    log "Build completed successfully!"
}

main "$@"
